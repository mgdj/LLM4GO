function processInclusionProofKeccak(bytes calldata proof, bytes32 leaf, uint256 index)
    internal
    pure
    returns (bytes32)
{
    require(proof.length % 32 == 0, "Merkle.processInclusionProofKeccak: proof length should be a multiple of 32");
    bytes32 computedHash = leaf;
    uint256 proofLength = proof.length;
    
    assembly {
        let dataOffset := proof
        
        for {let i := 32} lt(i, proofLength) {i := add(i, 32)} {
            if eq(mod(index, 2), 0) {
                // if ith bit of index is 0, then computedHash is a left sibling
                mstore(0x00, computedHash)
                mstore(0x20, mload(add(dataOffset, i)))
                computedHash := keccak256(0x00, 0x40)
                index := div(index, 2)
            } else {
                // if ith bit of index is 1, then computedHash is a right sibling
                mstore(0x00, mload(add(dataOffset, i)))
                mstore(0x20, computedHash)
                computedHash := keccak256(0x00, 0x40)
                index := div(index, 2)
            }
        }
    }
    
    return computedHash;
}