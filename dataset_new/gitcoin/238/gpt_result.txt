function slash(
    address[] calldata selfStakers,
    address[] calldata communityStakers,
    address[] calldata communityStakees,
    uint88 percent
  ) external onlyRole(SLASHER_ROLE) whenNotPaused {
    require(percent > 0 && percent <= 100, "InvalidSlashPercent");

    uint256 numSelfStakers = selfStakers.length;
    uint256 numCommunityStakers = communityStakers.length;

    require(numCommunityStakers == communityStakees.length, "StakerStakeeMismatch");

    for (uint256 i = 0; i < numSelfStakers; i++) {
      address staker = selfStakers[i];
      uint88 slashedAmount = (percent * selfStakes[staker].amount) / 100;

      updateStakeDetails(selfStakes[staker], slashedAmount);
    }

    for (uint256 i = 0; i < numCommunityStakers; i++) {
      address staker = communityStakers[i];
      address stakee = communityStakees[i];
      uint88 slashedAmount = (percent * communityStakes[staker][stakee].amount) / 100;

      updateStakeDetails(communityStakes[staker][stakee], slashedAmount);
    }
  }

  function updateStakeDetails(Stake storage stake, uint88 amount) internal {
    if (stake.slashedInRound != currentSlashRound) {
      if (stake.slashedInRound == currentSlashRound - 1) {
        totalSlashed[currentSlashRound - 1] -= stake.slashedAmount;
        totalSlashed[currentSlashRound] += stake.slashedAmount;
      } else {
        stake.slashedAmount = 0;
      }
    }

    totalSlashed[currentSlashRound] += amount;
    stake.slashedInRound = currentSlashRound;
    stake.slashedAmount += amount;
    stake.amount -= amount;

    userTotalStaked[msg.sender] -= amount;

    emit Slash(msg.sender, amount, currentSlashRound);
  }
