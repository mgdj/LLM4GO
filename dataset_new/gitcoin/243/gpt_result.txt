```solidity
function slash(
    address[] calldata selfStakers,
    address[] calldata communityStakers,
    address[] calldata communityStakees,
    uint88 percent
) external onlyRole(SLASHER_ROLE) whenNotPaused {
    require(percent > 0 && percent <= 100, "InvalidSlashPercent");
    
    uint256 numSelfStakers = selfStakers.length;
    uint256 numCommunityStakers = communityStakers.length;

    require(numCommunityStakers == communityStakees.length, "StakerStakeeMismatch");

    for (uint256 i = 0; i < numSelfStakers; i++) {
        address staker = selfStakers[i];
        Stake storage sStake = selfStakes[staker];
        uint88 slashedAmount = (percent * sStake.amount) / 100;

        updateSlashDetails(sStake, slashedAmount);

        emit Slash(staker, slashedAmount, currentSlashRound);
    }

    for (uint256 i = 0; i < numCommunityStakers; i++) {
        address staker = communityStakers[i];
        address stakee = communityStakees[i];
        Stake storage comStake = communityStakes[staker][stakee];
        uint88 slashedAmount = (percent * comStake.amount) / 100;

        updateSlashDetails(comStake, slashedAmount);

        emit Slash(staker, slashedAmount, currentSlashRound);
    }
}

function updateSlashDetails(Stake storage stake, uint88 amount) internal {
    if (stake.slashedInRound != 0 && stake.slashedInRound != currentSlashRound) {
        if (stake.slashedInRound == currentSlashRound - 1) {
            totalSlashed[currentSlashRound - 1] -= stake.slashedAmount;
            totalSlashed[currentSlashRound] += stake.slashedAmount;
        } else {
            stake.slashedAmount = 0;
        }
    }

    totalSlashed[currentSlashRound] += amount;

    stake.slashedInRound = currentSlashRound;
    stake.slashedAmount += amount;
    stake.amount -= amount;

    userTotalStaked[stake.staker] -= amount;
}
```