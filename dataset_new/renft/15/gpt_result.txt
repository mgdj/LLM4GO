function checkTransaction(
        address to,
        uint256 value,
        bytes memory data,
        Enum.Operation operation,
        uint256,
        uint256,
        uint256,
        address,
        address payable,
        bytes memory,
        address
    ) external override {
        // Disallow transactions that use delegate call, unless explicitly
        // permitted by the protocol.
        require(operation != Enum.Operation.DelegateCall || STORE.whitelistedDelegates(to), Errors.GuardPolicy_UnauthorizedDelegateCall(to));

        // Require that a function selector exists.
        require(data.length >= 4, Errors.GuardPolicy_FunctionSelectorRequired());

        // Fetch the hook to interact with for this transaction.
        address hook = STORE.contractToHook(to);
        
        // If a hook exists and is enabled, forward the control flow to the hook.
        if (hook != address(0) && STORE.hookOnTransaction(hook)) {
            _forwardToHook(hook, msg.sender, to, value, data);
        } else {
            // If no hook exists, use basic tx check.
            _checkTransaction(msg.sender, to, data);
        }
    }
