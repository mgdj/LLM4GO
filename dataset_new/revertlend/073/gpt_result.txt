### Recommendations:
1. Replace division operations with multiplication where possible.
2. Simplify calculations by reducing the number of operations.
3. Avoid unnecessary intermediate variables.
4. Consider using bitwise operations for multiplications and divisions by powers of 2.

### Optimization Code:
```solidity
contract InterestRateModel is Ownable, IInterestRateModel, IErrors {
    uint256 private constant Q96 = 2 ** 96;
    uint256 public constant YEAR_SECS = 31557600; // taking into account leap years

    uint256 public constant MAX_BASE_RATE_X96 = Q96 / 10; // 10%
    uint256 public constant MAX_MULTIPLIER_X96 = Q96 * 2; // 200%

    event SetValues(uint256 baseRatePerYearX96, uint256 multiplierPerYearX96, uint256 jumpMultiplierPerYearX96, uint256 kinkX96);

    uint256 public multiplierPerSecondX96;
    uint256 public baseRatePerSecondX96;
    uint256 public jumpMultiplierPerSecondX96;
    uint256 public kinkX96;

    constructor(
        uint256 baseRatePerYearX96,
        uint256 multiplierPerYearX96,
        uint256 jumpMultiplierPerYearX96,
        uint256 _kinkX96
    ) {
        setValues(baseRatePerYearX96, multiplierPerYearX96, jumpMultiplierPerYearX96, _kinkX96);
    }

    function getUtilizationRateX96(uint256 cash, uint256 debt) public pure returns (uint256) {
        if (debt == 0) {
            return 0;
        }
        return debt * Q96 / (cash + debt);
    }

    function getRatesPerSecondX96(uint256 cash, uint256 debt)
        public
        view
        override
        returns (uint256 borrowRateX96, uint256 supplyRateX96)
    {
        uint256 utilizationRateX96 = getUtilizationRateX96(cash, debt);

        if (utilizationRateX96 <= kinkX96) {
            borrowRateX96 = utilizationRateX96 * multiplierPerSecondX96 + baseRatePerSecondX96 * Q96;
        } else {
            uint256 excessUtilX96 = utilizationRateX96 - kinkX96;
            borrowRateX96 = excessUtilX96 * jumpMultiplierPerSecondX96 + (kinkX96 * multiplierPerSecondX96 + baseRatePerSecondX96) * Q96;
        }

        supplyRateX96 = utilizationRateX96 * borrowRateX96 / Q96;
    }

    function setValues(
        uint256 baseRatePerYearX96,
        uint256 multiplierPerYearX96,
        uint256 jumpMultiplierPerYearX96,
        uint256 _kinkX96
    ) public onlyOwner {
        if (baseRatePerYearX96 > MAX_BASE_RATE_X96 || multiplierPerYearX96 > MAX_MULTIPLIER_X96 || jumpMultiplierPerYearX96 > MAX_MULTIPLIER_X96) {
            revert InvalidConfig();
        }

        baseRatePerSecondX96 = baseRatePerYearX96 * Q96 / YEAR_SECS;
        multiplierPerSecondX96 = multiplierPerYearX96 * Q96 / YEAR_SECS;
        jumpMultiplierPerSecondX96 = jumpMultiplierPerYearX96 * Q96 / YEAR_SECS;
        kinkX96 = _kinkX96;

        emit SetValues(baseRatePerYearX96, multiplierPerYearX96, jumpMultiplierPerYearX96, _kinkX96);
    }
}
```